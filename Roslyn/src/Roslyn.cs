// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: drivers/roslyn.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Roslyn {

  /// <summary>Holder for reflection information generated from drivers/roslyn.proto</summary>
  public static partial class RoslynReflection {

    #region Descriptor
    /// <summary>File descriptor for drivers/roslyn.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoslynReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRkcml2ZXJzL3Jvc2x5bi5wcm90bxIGcm9zbHluIhgKBlZhclJlZhIOCgZ2",
            "YXJudW0YASABKAUiKAoGTHZhbHVlEh4KBnZhcnJlZhgBIAEoCzIOLnJvc2x5",
            "bi5WYXJSZWYiFAoFQ29uc3QSCwoDdmFsGAEgASgFIrgBCghCaW5hcnlPcBIf",
            "CgJvcBgBIAEoDjITLnJvc2x5bi5CaW5hcnlPcC5PcBIcCgRsZWZ0GAIgASgL",
            "Mg4ucm9zbHluLlJ2YWx1ZRIdCgVyaWdodBgDIAEoCzIOLnJvc2x5bi5SdmFs",
            "dWUiTgoCT3ASCAoEUExVUxAAEgkKBU1JTlVTEAESBwoDTVVMEAISBwoDRElW",
            "EAMSBwoDTU9EEAQSBwoDWE9SEAUSBwoDQU5EEAYSBgoCT1IQByJ8CgZSdmFs",
            "dWUSIAoGdmFycmVmGAEgASgLMg4ucm9zbHluLlZhclJlZkgAEh0KBGNvbnMY",
            "AiABKAsyDS5yb3NseW4uQ29uc3RIABIhCgViaW5vcBgDIAEoCzIQLnJvc2x5",
            "bi5CaW5hcnlPcEgAQg4KDHJ2YWx1ZV9vbmVvZiKgAQoJQ29tcGFyZU9wEiAK",
            "Am9wGAEgASgOMhQucm9zbHluLkNvbXBhcmVPcC5PcBIcCgRsZWZ0GAIgASgL",
            "Mg4ucm9zbHluLlJ2YWx1ZRIdCgVyaWdodBgDIAEoCzIOLnJvc2x5bi5SdmFs",
            "dWUiNAoCT3ASBgoCRVEQABIGCgJORRABEgYKAkxFEAISBgoCR0UQAxIGCgJM",
            "VBAEEgYKAkdUEAUihwEKCUxvZ2ljYWxPcBIgCgJvcBgBIAEoDjIULnJvc2x5",
            "bi5Mb2dpY2FsT3AuT3ASHwoEbGVmdBgCIAEoCzIRLnJvc2x5bi5Db25kaXRp",
            "b24SIAoFcmlnaHQYAyABKAsyES5yb3NseW4uQ29uZGl0aW9uIhUKAk9wEgcK",
            "A0FORBAAEgYKAk9SEAEiZQoJQ29uZGl0aW9uEiQKB2NvbXBhcmUYASABKAsy",
            "ES5yb3NseW4uQ29tcGFyZU9wSAASJAoHbG9naWNhbBgCIAEoCzIRLnJvc2x5",
            "bi5Mb2dpY2FsT3BIAEIMCgpjb25kX29uZW9mIlUKE0Fzc2lnbm1lbnRTdGF0",
            "ZW1lbnQSHgoGbHZhbHVlGAEgASgLMg4ucm9zbHluLkx2YWx1ZRIeCgZydmFs",
            "dWUYAiABKAsyDi5yb3NseW4uUnZhbHVlInkKBklmRWxzZRIfCgRjb25kGAEg",
            "ASgLMhEucm9zbHluLkNvbmRpdGlvbhIlCgdpZl9ib2R5GAIgASgLMhQucm9z",
            "bHluLlN0YXRlbWVudFNlcRInCgllbHNlX2JvZHkYAyABKAsyFC5yb3NseW4u",
            "U3RhdGVtZW50U2VxIm4KCVN0YXRlbWVudBIxCgphc3NpZ25tZW50GAEgASgL",
            "Mhsucm9zbHluLkFzc2lnbm1lbnRTdGF0ZW1lbnRIABIgCgZpZmVsc2UYAiAB",
            "KAsyDi5yb3NseW4uSWZFbHNlSABCDAoKc3RtdF9vbmVvZiI1CgxTdGF0ZW1l",
            "bnRTZXESJQoKc3RhdGVtZW50cxgBIAMoCzIRLnJvc2x5bi5TdGF0ZW1lbnQi",
            "NAoIRnVuY3Rpb24SKAoKc3RhdGVtZW50cxgBIAEoCzIULnJvc2x5bi5TdGF0",
            "ZW1lbnRTZXFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Roslyn.VarRef), global::Roslyn.VarRef.Parser, new[]{ "Varnum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Roslyn.Lvalue), global::Roslyn.Lvalue.Parser, new[]{ "Varref" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Roslyn.Const), global::Roslyn.Const.Parser, new[]{ "Val" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Roslyn.BinaryOp), global::Roslyn.BinaryOp.Parser, new[]{ "Op", "Left", "Right" }, null, new[]{ typeof(global::Roslyn.BinaryOp.Types.Op) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Roslyn.Rvalue), global::Roslyn.Rvalue.Parser, new[]{ "Varref", "Cons", "Binop" }, new[]{ "RvalueOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Roslyn.CompareOp), global::Roslyn.CompareOp.Parser, new[]{ "Op", "Left", "Right" }, null, new[]{ typeof(global::Roslyn.CompareOp.Types.Op) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Roslyn.LogicalOp), global::Roslyn.LogicalOp.Parser, new[]{ "Op", "Left", "Right" }, null, new[]{ typeof(global::Roslyn.LogicalOp.Types.Op) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Roslyn.Condition), global::Roslyn.Condition.Parser, new[]{ "Compare", "Logical" }, new[]{ "CondOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Roslyn.AssignmentStatement), global::Roslyn.AssignmentStatement.Parser, new[]{ "Lvalue", "Rvalue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Roslyn.IfElse), global::Roslyn.IfElse.Parser, new[]{ "Cond", "IfBody", "ElseBody" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Roslyn.Statement), global::Roslyn.Statement.Parser, new[]{ "Assignment", "Ifelse" }, new[]{ "StmtOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Roslyn.StatementSeq), global::Roslyn.StatementSeq.Parser, new[]{ "Statements" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Roslyn.Function), global::Roslyn.Function.Parser, new[]{ "Statements" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class VarRef : pb::IMessage<VarRef> {
    private static readonly pb::MessageParser<VarRef> _parser = new pb::MessageParser<VarRef>(() => new VarRef());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VarRef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roslyn.RoslynReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VarRef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VarRef(VarRef other) : this() {
      varnum_ = other.varnum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VarRef Clone() {
      return new VarRef(this);
    }

    /// <summary>Field number for the "varnum" field.</summary>
    public const int VarnumFieldNumber = 1;
    private int varnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Varnum {
      get { return varnum_; }
      set {
        varnum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VarRef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VarRef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Varnum != other.Varnum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Varnum != 0) hash ^= Varnum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Varnum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Varnum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Varnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Varnum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VarRef other) {
      if (other == null) {
        return;
      }
      if (other.Varnum != 0) {
        Varnum = other.Varnum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Varnum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Lvalue : pb::IMessage<Lvalue> {
    private static readonly pb::MessageParser<Lvalue> _parser = new pb::MessageParser<Lvalue>(() => new Lvalue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Lvalue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roslyn.RoslynReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lvalue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lvalue(Lvalue other) : this() {
      varref_ = other.varref_ != null ? other.varref_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lvalue Clone() {
      return new Lvalue(this);
    }

    /// <summary>Field number for the "varref" field.</summary>
    public const int VarrefFieldNumber = 1;
    private global::Roslyn.VarRef varref_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roslyn.VarRef Varref {
      get { return varref_; }
      set {
        varref_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Lvalue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Lvalue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Varref, other.Varref)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (varref_ != null) hash ^= Varref.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (varref_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Varref);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (varref_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Varref);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Lvalue other) {
      if (other == null) {
        return;
      }
      if (other.varref_ != null) {
        if (varref_ == null) {
          Varref = new global::Roslyn.VarRef();
        }
        Varref.MergeFrom(other.Varref);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (varref_ == null) {
              Varref = new global::Roslyn.VarRef();
            }
            input.ReadMessage(Varref);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Const : pb::IMessage<Const> {
    private static readonly pb::MessageParser<Const> _parser = new pb::MessageParser<Const>(() => new Const());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Const> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roslyn.RoslynReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Const() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Const(Const other) : this() {
      val_ = other.val_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Const Clone() {
      return new Const(this);
    }

    /// <summary>Field number for the "val" field.</summary>
    public const int ValFieldNumber = 1;
    private int val_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Val {
      get { return val_; }
      set {
        val_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Const);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Const other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Val != other.Val) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Val != 0) hash ^= Val.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Val != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Val);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Val != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Val);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Const other) {
      if (other == null) {
        return;
      }
      if (other.Val != 0) {
        Val = other.Val;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Val = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BinaryOp : pb::IMessage<BinaryOp> {
    private static readonly pb::MessageParser<BinaryOp> _parser = new pb::MessageParser<BinaryOp>(() => new BinaryOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BinaryOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roslyn.RoslynReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinaryOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinaryOp(BinaryOp other) : this() {
      op_ = other.op_;
      left_ = other.left_ != null ? other.left_.Clone() : null;
      right_ = other.right_ != null ? other.right_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinaryOp Clone() {
      return new BinaryOp(this);
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private global::Roslyn.BinaryOp.Types.Op op_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roslyn.BinaryOp.Types.Op Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 2;
    private global::Roslyn.Rvalue left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roslyn.Rvalue Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 3;
    private global::Roslyn.Rvalue right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roslyn.Rvalue Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BinaryOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BinaryOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Op != other.Op) return false;
      if (!object.Equals(Left, other.Left)) return false;
      if (!object.Equals(Right, other.Right)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Op != 0) hash ^= Op.GetHashCode();
      if (left_ != null) hash ^= Left.GetHashCode();
      if (right_ != null) hash ^= Right.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Op != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Op);
      }
      if (left_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Left);
      }
      if (right_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Right);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Op);
      }
      if (left_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Left);
      }
      if (right_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Right);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BinaryOp other) {
      if (other == null) {
        return;
      }
      if (other.Op != 0) {
        Op = other.Op;
      }
      if (other.left_ != null) {
        if (left_ == null) {
          Left = new global::Roslyn.Rvalue();
        }
        Left.MergeFrom(other.Left);
      }
      if (other.right_ != null) {
        if (right_ == null) {
          Right = new global::Roslyn.Rvalue();
        }
        Right.MergeFrom(other.Right);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Op = (global::Roslyn.BinaryOp.Types.Op) input.ReadEnum();
            break;
          }
          case 18: {
            if (left_ == null) {
              Left = new global::Roslyn.Rvalue();
            }
            input.ReadMessage(Left);
            break;
          }
          case 26: {
            if (right_ == null) {
              Right = new global::Roslyn.Rvalue();
            }
            input.ReadMessage(Right);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BinaryOp message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Op {
        [pbr::OriginalName("PLUS")] Plus = 0,
        [pbr::OriginalName("MINUS")] Minus = 1,
        [pbr::OriginalName("MUL")] Mul = 2,
        [pbr::OriginalName("DIV")] Div = 3,
        [pbr::OriginalName("MOD")] Mod = 4,
        [pbr::OriginalName("XOR")] Xor = 5,
        [pbr::OriginalName("AND")] And = 6,
        [pbr::OriginalName("OR")] Or = 7,
      }

    }
    #endregion

  }

  public sealed partial class Rvalue : pb::IMessage<Rvalue> {
    private static readonly pb::MessageParser<Rvalue> _parser = new pb::MessageParser<Rvalue>(() => new Rvalue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rvalue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roslyn.RoslynReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rvalue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rvalue(Rvalue other) : this() {
      switch (other.RvalueOneofCase) {
        case RvalueOneofOneofCase.Varref:
          Varref = other.Varref.Clone();
          break;
        case RvalueOneofOneofCase.Cons:
          Cons = other.Cons.Clone();
          break;
        case RvalueOneofOneofCase.Binop:
          Binop = other.Binop.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rvalue Clone() {
      return new Rvalue(this);
    }

    /// <summary>Field number for the "varref" field.</summary>
    public const int VarrefFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roslyn.VarRef Varref {
      get { return rvalueOneofCase_ == RvalueOneofOneofCase.Varref ? (global::Roslyn.VarRef) rvalueOneof_ : null; }
      set {
        rvalueOneof_ = value;
        rvalueOneofCase_ = value == null ? RvalueOneofOneofCase.None : RvalueOneofOneofCase.Varref;
      }
    }

    /// <summary>Field number for the "cons" field.</summary>
    public const int ConsFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roslyn.Const Cons {
      get { return rvalueOneofCase_ == RvalueOneofOneofCase.Cons ? (global::Roslyn.Const) rvalueOneof_ : null; }
      set {
        rvalueOneof_ = value;
        rvalueOneofCase_ = value == null ? RvalueOneofOneofCase.None : RvalueOneofOneofCase.Cons;
      }
    }

    /// <summary>Field number for the "binop" field.</summary>
    public const int BinopFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roslyn.BinaryOp Binop {
      get { return rvalueOneofCase_ == RvalueOneofOneofCase.Binop ? (global::Roslyn.BinaryOp) rvalueOneof_ : null; }
      set {
        rvalueOneof_ = value;
        rvalueOneofCase_ = value == null ? RvalueOneofOneofCase.None : RvalueOneofOneofCase.Binop;
      }
    }

    private object rvalueOneof_;
    /// <summary>Enum of possible cases for the "rvalue_oneof" oneof.</summary>
    public enum RvalueOneofOneofCase {
      None = 0,
      Varref = 1,
      Cons = 2,
      Binop = 3,
    }
    private RvalueOneofOneofCase rvalueOneofCase_ = RvalueOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RvalueOneofOneofCase RvalueOneofCase {
      get { return rvalueOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRvalueOneof() {
      rvalueOneofCase_ = RvalueOneofOneofCase.None;
      rvalueOneof_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rvalue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rvalue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Varref, other.Varref)) return false;
      if (!object.Equals(Cons, other.Cons)) return false;
      if (!object.Equals(Binop, other.Binop)) return false;
      if (RvalueOneofCase != other.RvalueOneofCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rvalueOneofCase_ == RvalueOneofOneofCase.Varref) hash ^= Varref.GetHashCode();
      if (rvalueOneofCase_ == RvalueOneofOneofCase.Cons) hash ^= Cons.GetHashCode();
      if (rvalueOneofCase_ == RvalueOneofOneofCase.Binop) hash ^= Binop.GetHashCode();
      hash ^= (int) rvalueOneofCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rvalueOneofCase_ == RvalueOneofOneofCase.Varref) {
        output.WriteRawTag(10);
        output.WriteMessage(Varref);
      }
      if (rvalueOneofCase_ == RvalueOneofOneofCase.Cons) {
        output.WriteRawTag(18);
        output.WriteMessage(Cons);
      }
      if (rvalueOneofCase_ == RvalueOneofOneofCase.Binop) {
        output.WriteRawTag(26);
        output.WriteMessage(Binop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rvalueOneofCase_ == RvalueOneofOneofCase.Varref) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Varref);
      }
      if (rvalueOneofCase_ == RvalueOneofOneofCase.Cons) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cons);
      }
      if (rvalueOneofCase_ == RvalueOneofOneofCase.Binop) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Binop);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rvalue other) {
      if (other == null) {
        return;
      }
      switch (other.RvalueOneofCase) {
        case RvalueOneofOneofCase.Varref:
          if (Varref == null) {
            Varref = new global::Roslyn.VarRef();
          }
          Varref.MergeFrom(other.Varref);
          break;
        case RvalueOneofOneofCase.Cons:
          if (Cons == null) {
            Cons = new global::Roslyn.Const();
          }
          Cons.MergeFrom(other.Cons);
          break;
        case RvalueOneofOneofCase.Binop:
          if (Binop == null) {
            Binop = new global::Roslyn.BinaryOp();
          }
          Binop.MergeFrom(other.Binop);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Roslyn.VarRef subBuilder = new global::Roslyn.VarRef();
            if (rvalueOneofCase_ == RvalueOneofOneofCase.Varref) {
              subBuilder.MergeFrom(Varref);
            }
            input.ReadMessage(subBuilder);
            Varref = subBuilder;
            break;
          }
          case 18: {
            global::Roslyn.Const subBuilder = new global::Roslyn.Const();
            if (rvalueOneofCase_ == RvalueOneofOneofCase.Cons) {
              subBuilder.MergeFrom(Cons);
            }
            input.ReadMessage(subBuilder);
            Cons = subBuilder;
            break;
          }
          case 26: {
            global::Roslyn.BinaryOp subBuilder = new global::Roslyn.BinaryOp();
            if (rvalueOneofCase_ == RvalueOneofOneofCase.Binop) {
              subBuilder.MergeFrom(Binop);
            }
            input.ReadMessage(subBuilder);
            Binop = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class CompareOp : pb::IMessage<CompareOp> {
    private static readonly pb::MessageParser<CompareOp> _parser = new pb::MessageParser<CompareOp>(() => new CompareOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompareOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roslyn.RoslynReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompareOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompareOp(CompareOp other) : this() {
      op_ = other.op_;
      left_ = other.left_ != null ? other.left_.Clone() : null;
      right_ = other.right_ != null ? other.right_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompareOp Clone() {
      return new CompareOp(this);
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private global::Roslyn.CompareOp.Types.Op op_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roslyn.CompareOp.Types.Op Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 2;
    private global::Roslyn.Rvalue left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roslyn.Rvalue Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 3;
    private global::Roslyn.Rvalue right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roslyn.Rvalue Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompareOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompareOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Op != other.Op) return false;
      if (!object.Equals(Left, other.Left)) return false;
      if (!object.Equals(Right, other.Right)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Op != 0) hash ^= Op.GetHashCode();
      if (left_ != null) hash ^= Left.GetHashCode();
      if (right_ != null) hash ^= Right.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Op != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Op);
      }
      if (left_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Left);
      }
      if (right_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Right);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Op);
      }
      if (left_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Left);
      }
      if (right_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Right);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompareOp other) {
      if (other == null) {
        return;
      }
      if (other.Op != 0) {
        Op = other.Op;
      }
      if (other.left_ != null) {
        if (left_ == null) {
          Left = new global::Roslyn.Rvalue();
        }
        Left.MergeFrom(other.Left);
      }
      if (other.right_ != null) {
        if (right_ == null) {
          Right = new global::Roslyn.Rvalue();
        }
        Right.MergeFrom(other.Right);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Op = (global::Roslyn.CompareOp.Types.Op) input.ReadEnum();
            break;
          }
          case 18: {
            if (left_ == null) {
              Left = new global::Roslyn.Rvalue();
            }
            input.ReadMessage(Left);
            break;
          }
          case 26: {
            if (right_ == null) {
              Right = new global::Roslyn.Rvalue();
            }
            input.ReadMessage(Right);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CompareOp message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Op {
        [pbr::OriginalName("EQ")] Eq = 0,
        [pbr::OriginalName("NE")] Ne = 1,
        [pbr::OriginalName("LE")] Le = 2,
        [pbr::OriginalName("GE")] Ge = 3,
        [pbr::OriginalName("LT")] Lt = 4,
        [pbr::OriginalName("GT")] Gt = 5,
      }

    }
    #endregion

  }

  public sealed partial class LogicalOp : pb::IMessage<LogicalOp> {
    private static readonly pb::MessageParser<LogicalOp> _parser = new pb::MessageParser<LogicalOp>(() => new LogicalOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogicalOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roslyn.RoslynReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogicalOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogicalOp(LogicalOp other) : this() {
      op_ = other.op_;
      left_ = other.left_ != null ? other.left_.Clone() : null;
      right_ = other.right_ != null ? other.right_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogicalOp Clone() {
      return new LogicalOp(this);
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private global::Roslyn.LogicalOp.Types.Op op_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roslyn.LogicalOp.Types.Op Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 2;
    private global::Roslyn.Condition left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roslyn.Condition Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 3;
    private global::Roslyn.Condition right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roslyn.Condition Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogicalOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogicalOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Op != other.Op) return false;
      if (!object.Equals(Left, other.Left)) return false;
      if (!object.Equals(Right, other.Right)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Op != 0) hash ^= Op.GetHashCode();
      if (left_ != null) hash ^= Left.GetHashCode();
      if (right_ != null) hash ^= Right.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Op != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Op);
      }
      if (left_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Left);
      }
      if (right_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Right);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Op);
      }
      if (left_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Left);
      }
      if (right_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Right);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogicalOp other) {
      if (other == null) {
        return;
      }
      if (other.Op != 0) {
        Op = other.Op;
      }
      if (other.left_ != null) {
        if (left_ == null) {
          Left = new global::Roslyn.Condition();
        }
        Left.MergeFrom(other.Left);
      }
      if (other.right_ != null) {
        if (right_ == null) {
          Right = new global::Roslyn.Condition();
        }
        Right.MergeFrom(other.Right);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Op = (global::Roslyn.LogicalOp.Types.Op) input.ReadEnum();
            break;
          }
          case 18: {
            if (left_ == null) {
              Left = new global::Roslyn.Condition();
            }
            input.ReadMessage(Left);
            break;
          }
          case 26: {
            if (right_ == null) {
              Right = new global::Roslyn.Condition();
            }
            input.ReadMessage(Right);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LogicalOp message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Op {
        [pbr::OriginalName("AND")] And = 0,
        [pbr::OriginalName("OR")] Or = 1,
      }

    }
    #endregion

  }

  public sealed partial class Condition : pb::IMessage<Condition> {
    private static readonly pb::MessageParser<Condition> _parser = new pb::MessageParser<Condition>(() => new Condition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Condition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roslyn.RoslynReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Condition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Condition(Condition other) : this() {
      switch (other.CondOneofCase) {
        case CondOneofOneofCase.Compare:
          Compare = other.Compare.Clone();
          break;
        case CondOneofOneofCase.Logical:
          Logical = other.Logical.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Condition Clone() {
      return new Condition(this);
    }

    /// <summary>Field number for the "compare" field.</summary>
    public const int CompareFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roslyn.CompareOp Compare {
      get { return condOneofCase_ == CondOneofOneofCase.Compare ? (global::Roslyn.CompareOp) condOneof_ : null; }
      set {
        condOneof_ = value;
        condOneofCase_ = value == null ? CondOneofOneofCase.None : CondOneofOneofCase.Compare;
      }
    }

    /// <summary>Field number for the "logical" field.</summary>
    public const int LogicalFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roslyn.LogicalOp Logical {
      get { return condOneofCase_ == CondOneofOneofCase.Logical ? (global::Roslyn.LogicalOp) condOneof_ : null; }
      set {
        condOneof_ = value;
        condOneofCase_ = value == null ? CondOneofOneofCase.None : CondOneofOneofCase.Logical;
      }
    }

    private object condOneof_;
    /// <summary>Enum of possible cases for the "cond_oneof" oneof.</summary>
    public enum CondOneofOneofCase {
      None = 0,
      Compare = 1,
      Logical = 2,
    }
    private CondOneofOneofCase condOneofCase_ = CondOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CondOneofOneofCase CondOneofCase {
      get { return condOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCondOneof() {
      condOneofCase_ = CondOneofOneofCase.None;
      condOneof_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Condition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Condition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Compare, other.Compare)) return false;
      if (!object.Equals(Logical, other.Logical)) return false;
      if (CondOneofCase != other.CondOneofCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (condOneofCase_ == CondOneofOneofCase.Compare) hash ^= Compare.GetHashCode();
      if (condOneofCase_ == CondOneofOneofCase.Logical) hash ^= Logical.GetHashCode();
      hash ^= (int) condOneofCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (condOneofCase_ == CondOneofOneofCase.Compare) {
        output.WriteRawTag(10);
        output.WriteMessage(Compare);
      }
      if (condOneofCase_ == CondOneofOneofCase.Logical) {
        output.WriteRawTag(18);
        output.WriteMessage(Logical);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (condOneofCase_ == CondOneofOneofCase.Compare) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Compare);
      }
      if (condOneofCase_ == CondOneofOneofCase.Logical) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Logical);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Condition other) {
      if (other == null) {
        return;
      }
      switch (other.CondOneofCase) {
        case CondOneofOneofCase.Compare:
          if (Compare == null) {
            Compare = new global::Roslyn.CompareOp();
          }
          Compare.MergeFrom(other.Compare);
          break;
        case CondOneofOneofCase.Logical:
          if (Logical == null) {
            Logical = new global::Roslyn.LogicalOp();
          }
          Logical.MergeFrom(other.Logical);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Roslyn.CompareOp subBuilder = new global::Roslyn.CompareOp();
            if (condOneofCase_ == CondOneofOneofCase.Compare) {
              subBuilder.MergeFrom(Compare);
            }
            input.ReadMessage(subBuilder);
            Compare = subBuilder;
            break;
          }
          case 18: {
            global::Roslyn.LogicalOp subBuilder = new global::Roslyn.LogicalOp();
            if (condOneofCase_ == CondOneofOneofCase.Logical) {
              subBuilder.MergeFrom(Logical);
            }
            input.ReadMessage(subBuilder);
            Logical = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class AssignmentStatement : pb::IMessage<AssignmentStatement> {
    private static readonly pb::MessageParser<AssignmentStatement> _parser = new pb::MessageParser<AssignmentStatement>(() => new AssignmentStatement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssignmentStatement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roslyn.RoslynReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssignmentStatement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssignmentStatement(AssignmentStatement other) : this() {
      lvalue_ = other.lvalue_ != null ? other.lvalue_.Clone() : null;
      rvalue_ = other.rvalue_ != null ? other.rvalue_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssignmentStatement Clone() {
      return new AssignmentStatement(this);
    }

    /// <summary>Field number for the "lvalue" field.</summary>
    public const int LvalueFieldNumber = 1;
    private global::Roslyn.Lvalue lvalue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roslyn.Lvalue Lvalue {
      get { return lvalue_; }
      set {
        lvalue_ = value;
      }
    }

    /// <summary>Field number for the "rvalue" field.</summary>
    public const int RvalueFieldNumber = 2;
    private global::Roslyn.Rvalue rvalue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roslyn.Rvalue Rvalue {
      get { return rvalue_; }
      set {
        rvalue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssignmentStatement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssignmentStatement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Lvalue, other.Lvalue)) return false;
      if (!object.Equals(Rvalue, other.Rvalue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (lvalue_ != null) hash ^= Lvalue.GetHashCode();
      if (rvalue_ != null) hash ^= Rvalue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (lvalue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Lvalue);
      }
      if (rvalue_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rvalue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (lvalue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lvalue);
      }
      if (rvalue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rvalue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssignmentStatement other) {
      if (other == null) {
        return;
      }
      if (other.lvalue_ != null) {
        if (lvalue_ == null) {
          Lvalue = new global::Roslyn.Lvalue();
        }
        Lvalue.MergeFrom(other.Lvalue);
      }
      if (other.rvalue_ != null) {
        if (rvalue_ == null) {
          Rvalue = new global::Roslyn.Rvalue();
        }
        Rvalue.MergeFrom(other.Rvalue);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (lvalue_ == null) {
              Lvalue = new global::Roslyn.Lvalue();
            }
            input.ReadMessage(Lvalue);
            break;
          }
          case 18: {
            if (rvalue_ == null) {
              Rvalue = new global::Roslyn.Rvalue();
            }
            input.ReadMessage(Rvalue);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IfElse : pb::IMessage<IfElse> {
    private static readonly pb::MessageParser<IfElse> _parser = new pb::MessageParser<IfElse>(() => new IfElse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IfElse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roslyn.RoslynReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IfElse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IfElse(IfElse other) : this() {
      cond_ = other.cond_ != null ? other.cond_.Clone() : null;
      ifBody_ = other.ifBody_ != null ? other.ifBody_.Clone() : null;
      elseBody_ = other.elseBody_ != null ? other.elseBody_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IfElse Clone() {
      return new IfElse(this);
    }

    /// <summary>Field number for the "cond" field.</summary>
    public const int CondFieldNumber = 1;
    private global::Roslyn.Condition cond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roslyn.Condition Cond {
      get { return cond_; }
      set {
        cond_ = value;
      }
    }

    /// <summary>Field number for the "if_body" field.</summary>
    public const int IfBodyFieldNumber = 2;
    private global::Roslyn.StatementSeq ifBody_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roslyn.StatementSeq IfBody {
      get { return ifBody_; }
      set {
        ifBody_ = value;
      }
    }

    /// <summary>Field number for the "else_body" field.</summary>
    public const int ElseBodyFieldNumber = 3;
    private global::Roslyn.StatementSeq elseBody_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roslyn.StatementSeq ElseBody {
      get { return elseBody_; }
      set {
        elseBody_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IfElse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IfElse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Cond, other.Cond)) return false;
      if (!object.Equals(IfBody, other.IfBody)) return false;
      if (!object.Equals(ElseBody, other.ElseBody)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cond_ != null) hash ^= Cond.GetHashCode();
      if (ifBody_ != null) hash ^= IfBody.GetHashCode();
      if (elseBody_ != null) hash ^= ElseBody.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cond_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Cond);
      }
      if (ifBody_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(IfBody);
      }
      if (elseBody_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ElseBody);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cond_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cond);
      }
      if (ifBody_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IfBody);
      }
      if (elseBody_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ElseBody);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IfElse other) {
      if (other == null) {
        return;
      }
      if (other.cond_ != null) {
        if (cond_ == null) {
          Cond = new global::Roslyn.Condition();
        }
        Cond.MergeFrom(other.Cond);
      }
      if (other.ifBody_ != null) {
        if (ifBody_ == null) {
          IfBody = new global::Roslyn.StatementSeq();
        }
        IfBody.MergeFrom(other.IfBody);
      }
      if (other.elseBody_ != null) {
        if (elseBody_ == null) {
          ElseBody = new global::Roslyn.StatementSeq();
        }
        ElseBody.MergeFrom(other.ElseBody);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cond_ == null) {
              Cond = new global::Roslyn.Condition();
            }
            input.ReadMessage(Cond);
            break;
          }
          case 18: {
            if (ifBody_ == null) {
              IfBody = new global::Roslyn.StatementSeq();
            }
            input.ReadMessage(IfBody);
            break;
          }
          case 26: {
            if (elseBody_ == null) {
              ElseBody = new global::Roslyn.StatementSeq();
            }
            input.ReadMessage(ElseBody);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Statement : pb::IMessage<Statement> {
    private static readonly pb::MessageParser<Statement> _parser = new pb::MessageParser<Statement>(() => new Statement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Statement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roslyn.RoslynReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Statement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Statement(Statement other) : this() {
      switch (other.StmtOneofCase) {
        case StmtOneofOneofCase.Assignment:
          Assignment = other.Assignment.Clone();
          break;
        case StmtOneofOneofCase.Ifelse:
          Ifelse = other.Ifelse.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Statement Clone() {
      return new Statement(this);
    }

    /// <summary>Field number for the "assignment" field.</summary>
    public const int AssignmentFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roslyn.AssignmentStatement Assignment {
      get { return stmtOneofCase_ == StmtOneofOneofCase.Assignment ? (global::Roslyn.AssignmentStatement) stmtOneof_ : null; }
      set {
        stmtOneof_ = value;
        stmtOneofCase_ = value == null ? StmtOneofOneofCase.None : StmtOneofOneofCase.Assignment;
      }
    }

    /// <summary>Field number for the "ifelse" field.</summary>
    public const int IfelseFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roslyn.IfElse Ifelse {
      get { return stmtOneofCase_ == StmtOneofOneofCase.Ifelse ? (global::Roslyn.IfElse) stmtOneof_ : null; }
      set {
        stmtOneof_ = value;
        stmtOneofCase_ = value == null ? StmtOneofOneofCase.None : StmtOneofOneofCase.Ifelse;
      }
    }

    private object stmtOneof_;
    /// <summary>Enum of possible cases for the "stmt_oneof" oneof.</summary>
    public enum StmtOneofOneofCase {
      None = 0,
      Assignment = 1,
      Ifelse = 2,
    }
    private StmtOneofOneofCase stmtOneofCase_ = StmtOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StmtOneofOneofCase StmtOneofCase {
      get { return stmtOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStmtOneof() {
      stmtOneofCase_ = StmtOneofOneofCase.None;
      stmtOneof_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Statement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Statement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Assignment, other.Assignment)) return false;
      if (!object.Equals(Ifelse, other.Ifelse)) return false;
      if (StmtOneofCase != other.StmtOneofCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stmtOneofCase_ == StmtOneofOneofCase.Assignment) hash ^= Assignment.GetHashCode();
      if (stmtOneofCase_ == StmtOneofOneofCase.Ifelse) hash ^= Ifelse.GetHashCode();
      hash ^= (int) stmtOneofCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stmtOneofCase_ == StmtOneofOneofCase.Assignment) {
        output.WriteRawTag(10);
        output.WriteMessage(Assignment);
      }
      if (stmtOneofCase_ == StmtOneofOneofCase.Ifelse) {
        output.WriteRawTag(18);
        output.WriteMessage(Ifelse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stmtOneofCase_ == StmtOneofOneofCase.Assignment) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Assignment);
      }
      if (stmtOneofCase_ == StmtOneofOneofCase.Ifelse) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ifelse);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Statement other) {
      if (other == null) {
        return;
      }
      switch (other.StmtOneofCase) {
        case StmtOneofOneofCase.Assignment:
          if (Assignment == null) {
            Assignment = new global::Roslyn.AssignmentStatement();
          }
          Assignment.MergeFrom(other.Assignment);
          break;
        case StmtOneofOneofCase.Ifelse:
          if (Ifelse == null) {
            Ifelse = new global::Roslyn.IfElse();
          }
          Ifelse.MergeFrom(other.Ifelse);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Roslyn.AssignmentStatement subBuilder = new global::Roslyn.AssignmentStatement();
            if (stmtOneofCase_ == StmtOneofOneofCase.Assignment) {
              subBuilder.MergeFrom(Assignment);
            }
            input.ReadMessage(subBuilder);
            Assignment = subBuilder;
            break;
          }
          case 18: {
            global::Roslyn.IfElse subBuilder = new global::Roslyn.IfElse();
            if (stmtOneofCase_ == StmtOneofOneofCase.Ifelse) {
              subBuilder.MergeFrom(Ifelse);
            }
            input.ReadMessage(subBuilder);
            Ifelse = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatementSeq : pb::IMessage<StatementSeq> {
    private static readonly pb::MessageParser<StatementSeq> _parser = new pb::MessageParser<StatementSeq>(() => new StatementSeq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatementSeq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roslyn.RoslynReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatementSeq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatementSeq(StatementSeq other) : this() {
      statements_ = other.statements_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatementSeq Clone() {
      return new StatementSeq(this);
    }

    /// <summary>Field number for the "statements" field.</summary>
    public const int StatementsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Roslyn.Statement> _repeated_statements_codec
        = pb::FieldCodec.ForMessage(10, global::Roslyn.Statement.Parser);
    private readonly pbc::RepeatedField<global::Roslyn.Statement> statements_ = new pbc::RepeatedField<global::Roslyn.Statement>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Roslyn.Statement> Statements {
      get { return statements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatementSeq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatementSeq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!statements_.Equals(other.statements_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= statements_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      statements_.WriteTo(output, _repeated_statements_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += statements_.CalculateSize(_repeated_statements_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatementSeq other) {
      if (other == null) {
        return;
      }
      statements_.Add(other.statements_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            statements_.AddEntriesFrom(input, _repeated_statements_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Function : pb::IMessage<Function> {
    private static readonly pb::MessageParser<Function> _parser = new pb::MessageParser<Function>(() => new Function());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Function> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Roslyn.RoslynReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Function() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Function(Function other) : this() {
      statements_ = other.statements_ != null ? other.statements_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Function Clone() {
      return new Function(this);
    }

    /// <summary>Field number for the "statements" field.</summary>
    public const int StatementsFieldNumber = 1;
    private global::Roslyn.StatementSeq statements_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Roslyn.StatementSeq Statements {
      get { return statements_; }
      set {
        statements_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Function);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Function other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Statements, other.Statements)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (statements_ != null) hash ^= Statements.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (statements_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Statements);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (statements_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Statements);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Function other) {
      if (other == null) {
        return;
      }
      if (other.statements_ != null) {
        if (statements_ == null) {
          Statements = new global::Roslyn.StatementSeq();
        }
        Statements.MergeFrom(other.Statements);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (statements_ == null) {
              Statements = new global::Roslyn.StatementSeq();
            }
            input.ReadMessage(Statements);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
